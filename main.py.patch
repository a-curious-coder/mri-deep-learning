# Patch generated by Pyment v0.3.3

--- a/main.py
+++ b/main.py
@@ -27,10 +27,11 @@
 
 
 def print_null_values(data):
-    """ Prints the quantity of null/NaN values in columns containing null/NaN values
-
-    Args:
-        data (pd.DataFrame): Tabular MRI data
+    """Prints the quantity of null/NaN values in columns containing null/NaN values
+
+    :param data: Tabular MRI data
+    :type data: pd.DataFrame
+
     """
     # Columns containing null/NaN values
     null_column_names = data.columns[data.isnull().any()].tolist()
@@ -42,11 +43,11 @@
 def normalize_tabular_data(mri_data):
     """Normalizes the values of each column (Excluding columns unrelated to the MRI scan itself)
 
-    Args:
-        mri_data (pd.DataFrame): MRI Data
-
-    Returns:
-        pd.DataFrame: Normalized MRI data
+    :param mri_data: MRI Data
+    :type mri_data: pd.DataFrame
+    :returns: Normalized MRI data
+    :rtype: pd.DataFrame
+
     """
     avoid = ["Gender", "Research Group", "Age"]
     # apply normalization techniques
@@ -59,8 +60,9 @@
 def clean_data(data):
     """Cleans MRI data, ready for deep learning model
 
-    Args:
-        data (pd.DataFrame): MRI data in tabular format
+    :param data: MRI data in tabular format
+    :type data: pd.DataFrame
+
     """
 
     pass
@@ -69,11 +71,10 @@
 def get_tabular_data(client):
     """Gets tabular MRI data from AWS
 
-    Args:
-        client (): AWS client
-
-    Returns:
-        pd.DataFrame: Tabular MRI data
+    :param client: AWS client
+    :returns: Tabular MRI data
+    :rtype: pd.DataFrame
+
     """
     response = client.get_object(Bucket='mri-deep-learning',
                                  Key='data/tabular/adni_ixi_rois_data_raw.csv')
@@ -81,6 +82,14 @@
 
 
 def random_forest(x_train, x_test, y_train, y_test):
+    """
+
+    :param x_train: 
+    :param x_test: 
+    :param y_train: 
+    :param y_test: 
+
+    """
     # Initialise classifier
     rf = RandomForestClassifier(n_estimators=50)
 
@@ -95,6 +104,12 @@
 
 
 def keras_network(data, test_size):
+    """
+
+    :param data: 
+    :param test_size: 
+
+    """
     x_train, x_test, y_train, y_test = train_test_split_with_labels(
         data, test_size=test_size)
     print("Accuracy\tNodes\tOptimizer\tLoss")
@@ -159,11 +174,12 @@
 def split_data_train_test(data, test_size=0.2):
     """Splits data into train and test dataframes
 
-    Args:
-        data (pd.DataFrame): tabular MRI data
-
-    Returns:
-        pd.DataFrame: Train and Test sets
+    :param data: tabular MRI data
+    :type data: pd.DataFrame
+    :param test_size:  (Default value = 0.2)
+    :returns: Train and Test sets
+    :rtype: pd.DataFrame
+
     """
     X = data.drop(['Research Group'], axis=1)
     y = data['Research Group'].tolist()
@@ -174,13 +190,16 @@
     """Splits the Tabular MRI data into train/test sets.
     Dataset contains multiple scans for some patients, we wouldn't want the same patient being included in both training and test sets.
 
-    Args:
-        x ([type]): [description]
-        y ([type]): [description]
-        test_size (float, optional): [description]. Defaults to 0.2.
-
-    Returns:
-        lists: Training and test splits
+    :param x: [description]
+    :type x: [type]
+    :param y: [description]
+    :type y: [type]
+    :param test_size: [description]. Defaults to 0.2.
+    :type test_size: float
+    :param data: 
+    :returns: Training and test splits
+    :rtype: lists
+
     """
 
     # TODO: Split dataset into a list of dataframes; one dataframe for each patient
@@ -212,13 +231,16 @@
     """Splits the Tabular MRI data into train/test sets.
     Dataset contains multiple scans for some patients, we wouldn't want the same patient being included in both training and test sets.
 
-    Args:
-        x (pd.DataFrame): data bar labels
-        y (pd.DataFrame): labels
-        test_size (float, optional): [description]. Defaults to 0.2.
-
-    Returns:
-        lists: Training and test splits
+    :param x: data bar labels
+    :type x: pd.DataFrame
+    :param y: labels
+    :type y: pd.DataFrame
+    :param test_size: [description]. Defaults to 0.2.
+    :type test_size: float
+    :param X: 
+    :returns: Training and test splits
+    :rtype: lists
+
     """
 
     # TODO: Split dataset into a list of dataframes; one dataframe for each patient
@@ -249,8 +271,9 @@
 def tabular_data(client):
     """Handles tabular MRI data
 
-    Args:
-        client (botocore.client.S3): API client to access tabular data
+    :param client: API client to access tabular data
+    :type client: botocore.client.S3
+
     """
     printt("Load Data")
     mri_data = get_tabular_data(client)
@@ -309,11 +332,12 @@
 def filter_original_data(data: pd.DataFrame) -> pd.DataFrame:
     """Filters full data-set to records we want
 
-    Args:
-        data (pd.DataFrame): full data-set
-
-    Returns:
-        pd.DataFrame: filtered data-set
+    :param data: full data-set
+    :type data: pd.DataFrame
+    :param data: pd.DataFrame: 
+    :returns: filtered data-set
+    :rtype: pd.DataFrame
+
     """
     # Filter data to AIBL project
     data = data[data['PROJECT'] == "AIBL"]
@@ -325,8 +349,10 @@
 def image_data_eda(data: pd.DataFrame):
     """Exploratory Data Analysis on dataframe
 
-    Args:
-        data (pd.DataFrame): mri data
+    :param data: mri data
+    :type data: pd.DataFrame
+    :param data: pd.DataFrame: 
+
     """
     dprint(data.info())
     dprint(data.describe())
@@ -336,15 +362,11 @@
 def load_mri_scans(dirs: list) -> list:
     """Loads in mri scans
 
-    Parameters
-    ----------
-    dirs : list
-        Directories
-
-    Returns
-    -------
-    list
-        MRI Scans
+    :param dirs: Directories
+    :type dirs: list
+    :param dirs: list: 
+
+    
     """
     images = []
     # Load each patient's image to list
@@ -359,8 +381,9 @@
 def image_data(client):
     """Image data classification
 
-    Args:
-        client (botocore.client.S3): API client to access image data
+    :param client: API client to access image data
+    :type client: botocore.client.S3
+
     """
 
     if not exists("refined_data.csv"):
@@ -425,11 +448,12 @@
 def handle_null_values(data: pd.DataFrame) -> pd.DataFrame:
     """Handles null values from data
 
-    Args:
-        data (pd.DataFrame): original data
-
-    Returns:
-        pd.DataFrame: identifies and removes null/nan values
+    :param data: original data
+    :type data: pd.DataFrame
+    :param data: pd.DataFrame: 
+    :returns: identifies and removes null/nan values
+    :rtype: pd.DataFrame
+
     """
     null_val_per_col = data.isnull().sum().to_frame(
         name='counts').query('counts > 0')
@@ -460,8 +484,10 @@
 def dprint(text: str):
     """Prints text during verbose mode
 
-    Args:
-        text (str): text
+    :param text: text
+    :type text: str
+    :param text: str: 
+
     """
     if verbose:
         print(text)
@@ -470,8 +496,9 @@
 def printt(title):
     """Print title
 
-    Args:
-        title (str): title
+    :param title: title
+    :type title: str
+
     """
     dprint("------------------------------------------------"
            f"\n\t{title}\n"
